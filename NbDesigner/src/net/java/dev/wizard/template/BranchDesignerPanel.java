/*
 * BranchDesignerPanel.java
 *
 * Created on January 4, 2007, 5:24 PM
 */

package net.java.dev.wizard.template;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JComponent;
import net.java.dev.wizard.template.graph.ConnectScene;
import net.java.dev.wizard.template.model.WizardModel;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author  Tim
 */
public class BranchDesignerPanel extends WizardPage implements MouseListener {
    ConnectScene scene;
    JComponent view;
    public BranchDesignerPanel(String... pages) {
        initComponents();
        init (pages);
    }
    
    public BranchDesignerPanel() {
        initComponents();
        setLongDescription ("Design Page Flow");
    }
    
    public static String getStep() {
        return "designBranch";
    }
    
    public static String getDescription() {
        return "Page Flow";
    }
    
    private void init (String[] pages) {
        scene = new ConnectScene (pages);
        view = scene.createView();
        scroll.setViewportView (view);
    }
    
    public void addNotify() {
        super.addNotify();
        scene.initialLayout();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        reflowButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(BranchDesignerPanel.class, "BranchDesignerPanel.jLabel1.text")); // NOI18N

        reflowButton.setText(org.openide.util.NbBundle.getMessage(BranchDesignerPanel.class, "BranchDesignerPanel.reflowButton.text")); // NOI18N
        reflowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflowButtonActionPerformed(evt);
            }
        });

        zoomOutButton.setText(org.openide.util.NbBundle.getMessage(BranchDesignerPanel.class, "BranchDesignerPanel.zoomOutButton.text")); // NOI18N
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });

        zoomInButton.setText(org.openide.util.NbBundle.getMessage(BranchDesignerPanel.class, "BranchDesignerPanel.zoomInButton.text")); // NOI18N
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                        .addGap(59, 59, 59)
                        .addComponent(zoomInButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomOutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reflowButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(reflowButton)
                    .addComponent(zoomOutButton)
                    .addComponent(zoomInButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
    scene.setZoomFactor(Math.max (0.1F, scene.getZoomFactor() - 0.1F));
    scene.validate();
}//GEN-LAST:event_zoomOutButtonActionPerformed

private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
    scene.setZoomFactor(scene.getZoomFactor() + 0.1F);
    scene.validate();
}//GEN-LAST:event_zoomInButtonActionPerformed

private void reflowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflowButtonActionPerformed
    scene.reflow();
}//GEN-LAST:event_reflowButtonActionPerformed
    
    protected String validateContents(Component component, Object event) {
        if (scene != null) {
            return scene.getWizardModel().getProblem();
        } else {
            return null;
        }
    }

    public static final String KEY_PAGES = "pages";
    protected void renderingPage() {
        WizardModel mdl = (WizardModel) getWizardData (KEY_PAGES);
        if (mdl == null) {
            String s = (String) getWizardData ("stepNames");
            if (s != null) {
                String[] descs = s.split ("\n");
                init (descs);
                //XXX update WizardModel from old data + stored strings
                //XXX listen to model for problems
                putWizardData(KEY_PAGES, scene.getWizardModel());
            }
        }
    }

    public void mouseEntered (MouseEvent me) {
    }

    public void mouseExited (MouseEvent me) {
    }
    public void mousePressed (MouseEvent me) {
    }
    public void mouseReleased (MouseEvent me) {
        userInputReceived (view, me);
    }
    public void mouseClicked (MouseEvent me) {
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton reflowButton;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
    
}
