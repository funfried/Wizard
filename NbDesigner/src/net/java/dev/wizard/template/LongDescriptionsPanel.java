/*
 * LongDescriptionsPanel.java
 *
 * Created on January 6, 2007, 5:53 PM
 */

package net.java.dev.wizard.template;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import net.java.dev.wizard.template.model.PageModel;
import net.java.dev.wizard.template.model.WizardModel;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author  Tim
 */
public class LongDescriptionsPanel extends WizardPage {
    
    /** Creates new form LongDescriptionsPanel */
    public LongDescriptionsPanel() {
        initComponents();
    }
    
    public static String getStep() {
        return "pageTitles";
    }
    
    public static String getDescription() {
        return "Customize Page Titles";
    }
    
    
    protected void renderingPage() {
        WizardModel mdl = (WizardModel) getWizardData(BranchDesignerPanel.KEY_PAGES);
        if (mdl != null) {
            jTable1.setModel (new StepsModel (mdl));
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        descriptions = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(LongDescriptionsPanel.class, "LongDescriptionsPanel.jLabel1.text")); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        descriptions.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(descriptions, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptions, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane descriptions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    private static final class StepsModel implements TableModel {
        private final List <PageModel> pages;
        public StepsModel (WizardModel mdl) {
            pages = new ArrayList <PageModel> (mdl.getPages());
        }
    
        public int getRowCount() {
            return pages.size();
        }

        public int getColumnCount() {
            return 3;
        }

        public String getColumnName(int ix) {
            switch (ix) {
                case 0 : return "Unique ID";
                case 1 : return "Short Description";
                case 2 : return "Long Description";
                default :
                    throw new AssertionError();
            }
        }

        public Class<?> getColumnClass(int arg0) {
            return String.class;
        }

        public boolean isCellEditable(int row, int col) {
            return col != 0;
        }

        public Object getValueAt(int row, int col) {
            if (row == -1) {
                return null;
            }
            PageModel page = pages.get(row);
            switch (col) {
                case 0 : return page.getUID();
                case 1 : return page.getDescription();
                case 2 : return page.getLongDescription() == null ? "" : page.getLongDescription();
                default :
                    throw new AssertionError();
            }
        }

        public void setValueAt(Object val, int row, int col) {
            PageModel page = pages.get(row);
            switch (col) {
                case 1 : 
                    page.setDescription(val.toString());
                    fire (row, col);
                    break;
                case 2 : 
                    page.setLongDescription(val.toString());
                    fire (row, col);
                    break;
                default :
                    throw new AssertionError();
            }
        }

        private final List <TableModelListener> listeners = 
                Collections.<TableModelListener>synchronizedList(new LinkedList());
        
        public void addTableModelListener(TableModelListener l) {
            listeners.add (l);
        }

        public void removeTableModelListener(TableModelListener l) {
            listeners.remove (l);
        }
        
        private void fire (int row, int col) {
            TableModelEvent e = new TableModelEvent (this, TableModelEvent.UPDATE, row, col);
            TableModelListener[] l = listeners.toArray (new TableModelListener[0]);
            for (int i = 0; i < l.length; i++) {
                l[i].tableChanged(e);
            }
        }
    }
    
}
